var fs = require('fs');
var util = require('util');
var EventEmitter = require("events").EventEmitter;
var _ = require('underscore');
var http = require('https');
var qs = require('querystring');


function MusicManager(){
	var self = this;
	var server_options = {};
	var list = {};
	var customList = [];
	var customListIndex = [];
	var pointerMusic;

	
	var db;

	this.folder = "./data/files/";

	var status = 'unloaded';
	var downloadBlock = false;
};

util.inherits(MusicManager, EventEmitter);

MusicManager.prototype.init = function(player_opts, server_options, db){
	var self = this;
	this.server_options = server_options;
	this.player_opts = player_opts;	
	
	this.db = db;
	this.db.transaction(function (tx) {
	  tx.executeSql('CREATE TABLE IF NOT EXISTS musicas_temp (audioid, name, artist, band, album, mood_velocity, mood_happy, path, playlist, type, date_start, date_end, hour_start, hour_end, weekdays, min_interval)',[],function(){
		tx.executeSql('DELETE FROM musicas_temp',function(){
			// complete
		},null, self.SQLError);
	  }, self.SQLError);
	  tx.executeSql('CREATE TABLE IF NOT EXISTS musicas (audioid, name, artist, band, album, mood_velocity, mood_happy, path, playlist, type, date_start, date_end, hour_start, hour_end, weekdays, min_interval)',[],null, self.SQLError);
	 
	  tx.executeSql('DROP TABLE insercoes_obrigatorias',[],null, self.SQLError);
	  tx.executeSql('CREATE TABLE IF NOT EXISTS insercoes_obrigatorias (audioid, type, name, description, path, date_start date, date_end date, hour_start, repeat)',[],null, self.SQLError);
	});
	self.emit('load-list');
}

MusicManager.prototype.SQLError = function(){
	console.error( arguments );
	//throw new Error(arguments.join(','));
}

/**
*     List Manager
*
*/

MusicManager.prototype.saveList = function( data ){
	var self = this;

	this.db.transaction(function (tx) {
		_.each( self.list.audios, function( val, i ){
			var mus = val;
			var keys = _.keys(val);
			var values = _.values(val);
			tx.executeSql('INSERT INTO musicas_temp (' + keys.join(', ') +') VALUES ("' + values.join('", "') +'")',[],null,self.SQLError);
		});
	});

	var txt = JSON.stringify(this.list);
	this.emit('savelist', txt);
};

MusicManager.prototype.loadList = function( list ){
	var self = this;
	self.list = JSON.parse(list);
	self.saveList(self.list);
	self.emit('loadlist-complete', JSON.parse(list));
}

MusicManager.prototype.verifyList = function( list ){
	var self = this;
	list || (list = self.list.audios);
	
	var ret = {
		founded: [],
		notfounded: []
	};

	_.each(list, function( music ){
		var filename = music.path.split('/').pop();
		if(fs.existsSync( "./data/files/" + filename )){
			ret.founded.push(music);
		}else{
			ret.notfounded.push(music);
		}; 
	});

	return ret;
}

MusicManager.prototype.comparieLists = function(callback){
	var self = this;
	this.db.transaction(function (tx) {
	  tx.executeSql('SELECT t1.* FROM musicas_temp t1 LEFT JOIN musicas t2 ON t2.audioid = t1.audioid WHERE t2.audioid IS NULL', [], function (tx, results) {
	  	var ret = [];
	    var len = results.rows.length, i;
	    for (i = 0; i < len; i++) {	    	
	    	var mus = results.rows.item(i);	    	
	    	mus.file = (mus.path).split('/').pop();
	      	ret.push(mus);
	      	//console.log(mus);
	    }
	    if(callback)callback(ret);
	  }, self.SQLError);
	});
}

// Busca os arquivos de áudio local
/* provisoriamente usada como playlist */
MusicManager.prototype.localList = function(callback){
	var self = this;
	self.customList = [];
	self.customListIndex = [];
	// Query out the data
	this.db.transaction(function (tx) {
	  tx.executeSql('SELECT * FROM musicas', [], function (tx, results) {
	  	var ret = [];
	    var len = results.rows.length, i;
	    for (i = 0; i < len; i++) {	    	
	    	var mus = results.rows.item(i);	    	
	    	mus.file = (mus.path).split('/').pop();
	      	ret.push(mus);
	      	
			self.customList.push(mus);
			self.customListIndex.push(mus.audioid);
	    }
		console.log(self.customListIndex);
	    if(callback)callback(ret);
	  }, self.SQLError);
	});
}


MusicManager.prototype.nextMusic = function(){
	var self = this;
	self.pointerMusic = self.pointerMusic || 0
	var music = self.customList[self.pointerMusic];
	self.pointerMusic++;
	if(self.pointerMusic>=self.customList.length){
		self.pointerMusic = 0;
	} 
	if (self.customList.length==0) {
		return false;
	} else {
		return music;
	}
}


MusicManager.prototype.tempList = function(callback){
	var self = this;
	self.customList = [];
	self.customListIndex = [];
	
	// Query out the data
	this.db.transaction(function (tx) {
	  tx.executeSql('SELECT * FROM musicas_temp', [], function (tx, results) {
	  	var ret = [];
	    var len = results.rows.length, i;
	    for (i = 0; i < len; i++) {	    	
	    	var mus = results.rows.item(i);	    	
	    	mus.file = (mus.path).split('/').pop();
	      	ret.push(mus);
			
			self.customList.push(mus);
			self.customListIndex.push(mus.audioid);
	    }
	    if(callback)callback(ret);
	  }, self.SQLError);
	});
}

MusicManager.prototype.updateList = function(callback){
	(callback || (callback = function(){}));
	var self = this;
	self.db.transaction(function (tx) {
		//tx.executeSql('TRUNCATE TABLE musicas');
		tx.executeSql('DELETE FROM musicas',[],function(){
			tx.executeSql('INSERT INTO musicas SELECT * FROM musicas_temp', [], function (tx, results) {
				if(callback){callback(results);}
			}, self.SQLError);

		});
	});
}

MusicManager.prototype.resetLists = function(){
	var self = this;
	
	//console.log("resetLists in MusicManager");
	
	this.db.transaction(function (tx) {
		tx.executeSql('DELETE FROM musicas_temp',function(){
				// complete
			},null, self.SQLError);
		tx.executeSql('DELETE FROM musicas',function(){
				// complete
			},null, self.SQLError);	
	});
	_.each(fs.readdirSync("./data/files/"), function( music ){
		if(fs.existsSync( "./data/files/" + music )){
			fs.unlink( "./data/files/" + music );
		}; 
	});
}

/**
*     Musics Manager
*
*/

MusicManager.prototype.downloadMusics = function( list ){
	var self = this;
	list || (list = self.verifyList().notfounded);

	if(list.length == 0){ 
		self.comparieLists(function(list){
			self.emit('loadmusic-allcomplete');
			if( list.length == 0 ){
				console.log("Todas as musicas estao baixadas e já atualizadas");
			}else{
				console.log("Todas as musicas estao baixadas e tem atualização");
				self.emit('loadmusic-hasUpdate');
			}
		});
		return true; 
	}

	var next = list.pop();
	var filename = next.path.split('/').pop();

	var so = this.server_options;

	var file_url = so.protocol + "//" + so.hostname + so.path + "/" + next.path;
	var file_uri = this.folder + filename;

	if(!fs.existsSync( file_uri )){
		var file = fs.createWriteStream( file_uri );

		var options = {
		    path: file_url
		};
		_.extend( options, this.server_options);

		http.get( file_url , function(res) {
			self.emit('loadmusic-start', next);
			console.log(file_url + ' downloading');
		    res.on('data', function(data) {
		            file.write(data);
		        }).on('end', function() {
		            file.end();
					self.emit('loadmusic-complete', next);
		            self.downloadMusics(list);
		            console.log(file_url + ' downloaded');
		        });
		    });
	}else{
		console.log(filename + ' exists ');
		this.downloadMusics(list);
	}
}

MusicManager.prototype.playSpecial = function( data ){
	var self = this;
	//console.log("playSpecial in MusicManager");
	this.db.transaction(function (tx) {
		var keys = _.keys(data);
		var values = _.values(data);
		var query = 'INSERT INTO insercoes_obrigatorias (' + keys.join(', ') +') VALUES ("' + values.join('", "') +'")';
		tx.executeSql(query,[],null,self.SQLError);
		
		
		
		//SELECT base para conferencia antes do envio de faixas para as outras classes
		var date = new Date();
		var today = date.getFullYear()+""+("0" + (date.getMonth() + 1)).slice(-2)+""+date.getDate();
		tx.executeSql('SELECT * FROM insercoes_obrigatorias WHERE  date_start < "'+today+'" AND date_end < "'+today+'"', [], function (tx, results) {
			var ret = [];
			var len = results.rows.length, i;
			for (i = 0; i < len; i++) {	    	
				var mus = results.rows.item(i);	    	
				mus.file = (mus.path).split('/').pop();
				ret.push(mus);
			}
		  }, self.SQLError);
	});
	 
};

module.exports = new MusicManager();

