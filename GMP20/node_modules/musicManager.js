var fs = require('fs');
var util = require('util');
var EventEmitter = require("events").EventEmitter;
var _ = require('underscore');
var http = require('https');
var qs = require('querystring');


function MusicManager(){
	var self = this;
	var server_options = {};
	var list = {};
	var customList = [];
	var customListIndex = [];
	var pointerMusic;
	var hasUpdateAvaiable = false;
	var keys;
	var db;
	var selectedPlaylist;
	var normalPlaylist = "playlist-misto";
	
	
	this.folder = "./data/files/";

	var status = 'unloaded';
	var downloadBlock = false;
};

util.inherits(MusicManager, EventEmitter);

MusicManager.prototype.init = function(player_opts, server_options, db){
	var self = this;
	this.server_options = server_options;
	this.player_opts = player_opts;	
	
	this.db = db;
	this.db.transaction(function (tx) {
		tx.executeSql('DROP TABLE musicas_temp;', [], null, self.SQLError);
		tx.executeSql('CREATE TABLE IF NOT EXISTS musicas_temp (audioid, name, artist, band, album, mood_velocity, mood_happy, path, playlist, type, date_start, date_end, hour_start, hour_end, weekdays, min_interval)',[],function(){
		tx.executeSql('DELETE FROM musicas_temp',function(){
			// complete
		},null, self.SQLError);
		}, self.SQLError);
		tx.executeSql('DROP TABLE musicas;', [], null, self.SQLError);
		tx.executeSql('CREATE TABLE IF NOT EXISTS musicas (audioid, name, artist, band, album, mood_velocity, mood_happy, path, playlist, type, date_start, date_end, hour_start, hour_end, weekdays, min_interval)',[],null, self.SQLError);
		 
		tx.executeSql('DROP TABLE insercoes_obrigatorias',[],null, self.SQLError);
		tx.executeSql('CREATE TABLE IF NOT EXISTS insercoes_obrigatorias (audioid, type, name, description, path, date_start date, date_end date, hour_start, repeat)',[],null, self.SQLError);
	});
	
	self.getLocalList();
	self.emit('load-list');
}
MusicManager.prototype.makeUpdateAvaiable = function (){ //Torna o update pelas novas musicas enviadas pelo servidor disponível para o cliente.
	var self = this;
	self.hasUpdateAvaiable = true;
	self.db.transaction(function (tx) {
		_.each( self.list.data.audios, function( val, i ){
			var mus = val;
			self.keys = _.keys(val);
			var values = _.values(val);
			tx.executeSql('INSERT INTO musicas_temp (' + self.keys.join(', ') +') VALUES ("' + values.join('", "') +'")',[],null,self.SQLError);
		});
	});
}
MusicManager.prototype.loadList = function( list ){
	var self = this;
	self.list = JSON.parse(list);
	self.verifyList(self.list.data.audios);
}
MusicManager.prototype.verifyList = function( list ){
	var self = this;
	list || (list = self.list.data.audios);
	var ret = {
		founded: [],
		notfounded: []
	};
	_.each(list, function( music ){
		var filename = music.path.split('/').pop();
		if(fs.existsSync( "./data/files/" + filename )){
			ret.founded.push(music);
		}else{
			ret.notfounded.push(music);
		};
	});
	if(ret.notfounded.length>0){
		self.downloadMusics(ret.notfounded)
	} else {
		self.emit('download-completed');
	}
}

MusicManager.prototype.updateLocalList = function(callback){ //Faz a sincronização da lista local com a lista do servidor.
	var self = this;
	self.customList = [];
	self.customListIndex = [];
	// Query out the data
	self.hasUpdateAvaiable = false;
	
	this.db.transaction(function (tx) {
		tx.executeSql('DROP TABLE musicas;', [], null, self.SQLError);
		tx.executeSql('CREATE TABLE IF NOT EXISTS musicas (audioid, name, artist, band, album, mood_velocity, mood_happy, path, playlist, type, date_start, date_end, hour_start, hour_end, weekdays, min_interval)',[],null, self.SQLError);
		tx.executeSql('SELECT * FROM musicas_temp WHERE playlist <> "chamada"', [], function (tx, results) {
			console.log('updateLocalList dentro do select');
			var ret = [];
			var len = results.rows.length, i;
			for (i = 0; i < len; i++) {
				console.log('for');
				var mus = results.rows.item(i);	    	
				tx.executeSql('INSERT INTO musicas (' + self.keys.join(', ') +') VALUES ("'+ mus.audioid +'", "'+ mus.name +'", "'+ mus.artist +'", "'+ mus.band +'", "'+ mus.album +'", "'+ mus.mood_velocity +'", "'+ mus.mood_happy +'", "'+ mus.path +'", "'+ mus.playlist +'", "'+ mus.type +'", "'+ mus.date_start +'", "'+ mus.date_end +'", "'+ mus.hour_start +'", "'+ mus.hour_end +'", "'+ mus.weekdays +'", "'+ mus.min_interval +'")',[],null,self.SQLError);
				mus.file = (mus.path).split('/').pop();
				ret.push(mus);
				
				self.customList.push(mus);
				self.customListIndex.push(mus.audioid);
				
			}
			if(callback)callback(ret);
		}, self.SQLError);
	});
}
//Devolve a próxima faixa
MusicManager.prototype.nextMusic = function(){
	var self = this;
	self.pointerMusic = self.pointerMusic || 0;
	if (self.customList.length==0) {
		self.pointerMusic = 0;
		self.updateLocalList(function (){
			self.emit('autoupdate');
		});
	} else {
		var security = 0;
		var maxSecurity = 100;
		var lastMusic = self.pointerMusic;
		do {
			security++;
			var music = self.customList[self.pointerMusic];
			self.pointerMusic++;
			if(self.pointerMusic>=self.customList.length){
				self.pointerMusic = 0;
			}
		} while(security<maxSecurity && !self.verifyMusic(music.weekdays, music.date_start, music.date_end, music.hour_start, music.hour_end, music.playlist, music.name));
		if(lastMusic == self.pointerMusic){
			self.emit("just-one");
		}
		if(security>maxSecurity-1){
			console.log("Erro no processamento, talvez a música escolhida não seja atenda aos requesitos básicos para ser tocada. Favor contactar o suporte.");
		}
		return music;
	}
}
MusicManager.prototype.verifyMusic = function( music_days, music_init, music_end, music_hour_start, music_hour_end, playlist, name ){//verifica se a música apontada deve ser tocada
	var self = this;
	playlist = self.verifyIsPlaylist( playlist );//verifica se a playlist é a normal
	weekdays = self.verifyWeekDay(music_days);//verifica se o dia da semana é apropriado para a entrevista
	date = self.verifyDate(music_init, music_end);//verifica se a musica está dentro da faixa para ser tocada
	hour = self.verifyHour(music_hour_start, music_hour_end);//verifica se o horário é apropriado para a música
	/*/
	console.log("_____________________ "+name);
	console.log("weekdays " + self.verifyWeekDay(music_days));
	console.log("dia do mes " + self.verifyDate(music_init, music_end));
	console.log("hora do dia " + self.verifyHour(music_hour_start, music_hour_end));
	console.log("Serve? " + (weekdays && date && hour));
	/*/
	var result = (weekdays && date && hour && playlist)? true : false;
	return result;
}
MusicManager.prototype.verifyIsPlaylist = function( playlist ){
		var r = false;
		if(this.selectedPlaylist == this.normalPlaylist && this.selectedPlaylist == playlist){// verifica se a playlist normal está selecionada e se a playlist selecionada é igual a playlist da musica
			r = true;
		}
		return r;
}
MusicManager.prototype.verifyHour = function( music_hour_start, music_hour_end ){// verifica se a musica está dentro do range de horario 
		var date = new Date();
		var now = date.getHours();
		var r =(now > music_hour_start && now < music_hour_end)? true: false;
		return r;
}
MusicManager.prototype.verifyWeekDay = function( music_days ){// verifica se a musica marcada para tocar neste dia
		var date = new Date();
		var today = date.getDay();
		var validity = music_days.slice(today*1,today*1+1);
		var r =(validity=="1")? true: false;
		return r;
}
MusicManager.prototype.verifyDate = function( music_init, music_end ){ // verifica se a musica está dentro do range de data
		var date = new Date();
		var day = date.getDate();
		day = (day<10)? "0" + day : day;
		var month = date.getMonth()*1+1;
		month = (month<10)? "0" + month : month;
		var year = date.getFullYear();
		var today = year+""+month+""+day;
		var r =(today*1-music_init*1 > 0 && today*1-music_end*1 < 0)? true: false;
		return r;
}
MusicManager.prototype.changePlaylist = function( selectedPlaylist ){
		this.selectedPlaylist = selectedPlaylist;
}

MusicManager.prototype.getLocalList = function(callback){ //Pega a lista atual SEM ATUALIZAR NADA do servidor e põe pra jogo.
	var self = this;
	self.customList = [];
	self.customListIndex = [];
	// Query out the data
	this.db.transaction(function (tx) {
	  tx.executeSql('SELECT * FROM musicas WHERE playlist <> "chamada"', [], function (tx, results) {
	  	var ret = [];
	    var len = results.rows.length, i;
	    for (i = 0; i < len; i++) {
			var mus = results.rows.item(i);	    	
	    	mus.file = (mus.path).split('/').pop();
	      	ret.push(mus);
			self.customList.push(mus);
			self.customListIndex.push(mus.audioid);
	    }
	    if(callback)callback(ret);
	  }, self.SQLError);
	});
}


//Reseta a lista atual ????????????????????????????????????????????????????????????????????
MusicManager.prototype.resetLists = function(){
	var self = this;
	//console.log("resetLists in MusicManager");
	this.db.transaction(function (tx) {
		tx.executeSql('DELETE FROM musicas_temp',function(){
				// complete
			},null, self.SQLError);
		tx.executeSql('DELETE FROM musicas',function(){
				// complete
			},null, self.SQLError);	
	});
	_.each(fs.readdirSync("./data/files/"), function( music ){
		if(fs.existsSync( "./data/files/" + music )){
			fs.unlink( "./data/files/" + music );
		}; 
	});/*//*/
}

MusicManager.prototype.downloadMusics = function( list ){
	var self = this;
	var so = this.server_options;

	var next = list.pop();
	if(next){
		var filename = next.path.split('/').pop();
	} else {
		self.emit('download-completed');
		return;
	}
	
	console.log(filename);
	var so = this.server_options;
	var file_url = so.protocol + "//" + so.hostname + so.path + "/" + next.path;
	var file_uri = this.folder + filename;
	
	if(!fs.existsSync( file_uri )){
		var file = fs.createWriteStream( file_uri );
		var options = {
		    path: file_url
		};
		_.extend( options, this.server_options);
		http.get( file_url , function(res) {
			self.emit('loadmusic-start', next);
			console.log(file_url + ' downloading');
		    res.on('data', function(data) {
		            file.write(data);
		        }).on('end', function() {
		            file.end();
					self.emit('loadmusic-complete', next);
		            self.downloadMusics(list);
		            console.log(file_url + ' downloaded');
		        });
		    });
	}
};
	
//Diminui o volume dos canais 1 e 2 e toca em um terceiro canal uma faixa especial da lista de inserções
MusicManager.prototype.playSpecial = function( data ){
	var self = this;
	//console.log("playSpecial in MusicManager");
	this.db.transaction(function (tx) {
		var keys = _.keys(data);
		var values = _.values(data);
		var query = 'INSERT INTO insercoes_obrigatorias (' + keys.join(', ') +') VALUES ("' + values.join('", "') +'")';
		tx.executeSql(query,[],null,self.SQLError);
		
		//SELECT base para conferencia antes do envio de faixas para as outras classes
		var date = new Date();
		var today = date.getFullYear()+""+("0" + (date.getMonth() + 1)).slice(-2)+""+date.getDate();
		tx.executeSql('SELECT * FROM insercoes_obrigatorias WHERE  date_start < "'+today+'" AND date_end < "'+today+'"', [], function (tx, results) {
			var ret = [];
			var len = results.rows.length, i;
			for (i = 0; i < len; i++) {	    	
				var mus = results.rows.item(i);	    	
				mus.file = (mus.path).split('/').pop();
				ret.push(mus);
			}
		  }, self.SQLError);
	});
};
module.exports = new MusicManager();









//Mostra erros do SQL
MusicManager.prototype.SQLError = function(){
	console.error( arguments );
	//throw new Error(arguments.join(','));
}