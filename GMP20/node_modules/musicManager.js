var fs = require('fs');
var util = require('util');
var EventEmitter = require("events").EventEmitter;
var _ = require('underscore');
var http = require('https');
var qs = require('querystring');


function MusicManager(){
	var self = this;
	var server_options = {};
	var list = {};
	var customList = [];
	var customListIndex = [];
	var pointerMusic;
	var hasUpdateAvaiable = false;
	var keys;
	var db;
	var selectedPlaylist;
	var selectedPoint = { x:50, y:50 };
	var playlists = [];
	
	this.folder = "./data/files/";

	var status = 'unloaded';
	var downloadBlock = false;
};

util.inherits(MusicManager, EventEmitter);

MusicManager.prototype.init = function(player_opts, server_options, db){
	var self = this;
	this.server_options = server_options;
	this.player_opts = player_opts;	
	this.selectedPoint = { x:50, y:50 };
	this.db = db;
	this.db.transaction(function (tx) {
		tx.executeSql('DROP TABLE musicas_temp;', [], null, self.SQLError);
		tx.executeSql('CREATE TABLE IF NOT EXISTS musicas_temp (audioid, name, artist, band, album, mood_velocity, mood_happy, path, playlist, type, date_start, date_end, hour_start, hour_end, weekdays, min_interval, distance)',[],function(){
		tx.executeSql('DELETE FROM musicas_temp',function(){
			// complete
		},null, self.SQLError);
		}, self.SQLError);
		tx.executeSql('DROP TABLE playlists;', [], null, self.SQLError);
		tx.executeSql('CREATE TABLE IF NOT EXISTS playlists (playlistid, name, type)',[],null, self.SQLError);
		
		tx.executeSql('DROP TABLE musicas;', [], null, self.SQLError);
		tx.executeSql('CREATE TABLE IF NOT EXISTS musicas (audioid, name, artist, band, album, mood_velocity, mood_happy, path, playlist, type, date_start, date_end, hour_start, hour_end, weekdays, min_interval, distance)',[],null, self.SQLError);
		 
		tx.executeSql('DROP TABLE insercoes_obrigatorias',[],null, self.SQLError);
		tx.executeSql('CREATE TABLE IF NOT EXISTS insercoes_obrigatorias (audioid, type, name, description, path, date_start date, date_end date, hour_start, repeat)',[],null, self.SQLError);
	});
	
	self.getLocalList();
	self.emit('load-list');
}
MusicManager.prototype.makeUpdateAvaiable = function (){ //Torna o update pelas novas musicas enviadas pelo servidor disponível para o cliente.
	var self = this;
	self.hasUpdateAvaiable = true;
	self.db.transaction(function (tx) {
		_.each( self.list.data.audios, function( val, i ){
			var mus = val;
			self.keys = _.keys(val);
			var values = _.values(val);
			tx.executeSql('INSERT INTO musicas_temp (' + self.keys.join(', ') +') VALUES ("' + values.join('", "') +'")',[],null,self.SQLError);
		});
		tx.executeSql('SELECT * FROM musicas', [], function (tx, results) {
			var len = results.rows.length;
			if(len==0){
				self.updateLocalList();
			} else {
				self.emit('ready-to-start');
			}
		}, self.SQLError);
		
	});
}
MusicManager.prototype.loadList = function( list ){
	var self = this;
	self.list = JSON.parse(list);
	self.verifyList(self.list.data.audios);
}
MusicManager.prototype.verifyList = function( list ){
	var self = this;
	list || (list = self.list.data.audios);
	var ret = {
		founded: [],
		notfounded: []
	};
	_.each(list, function( music ){
		var filename = music.path.split('/').pop();
		if(fs.existsSync( "./data/files/" + filename )){
			ret.founded.push(music);
		}else{
			ret.notfounded.push(music);
		};
	});
	if(ret.notfounded.length>0){
		self.downloadMusics(ret.notfounded)
	} else {
		self.emit('download-completed');
	}
}

MusicManager.prototype.updateLocalList = function(callback){ //Faz a sincronização da lista local com a lista do servidor.
	var self = this;
	self.customList = [];
	self.customListIndex = [];
	// Query out the data
	self.hasUpdateAvaiable = false;
	
	this.db.transaction(function (tx) {
		tx.executeSql('DROP TABLE musicas;', [], null, self.SQLError);
		tx.executeSql('CREATE TABLE IF NOT EXISTS musicas (audioid, name, artist, band, album, mood_velocity, mood_happy, path, playlist, type, date_start, date_end, hour_start, hour_end, weekdays, min_interval, distance)',[],null, self.SQLError);
		tx.executeSql('SELECT * FROM musicas_temp WHERE playlist <> "chamada"', [], function (tx, results) {
			var ret = [];
			var len = results.rows.length, i;
			for (i = 0; i < len; i++) {
				var mus = results.rows.item(i);	    	
				tx.executeSql('INSERT INTO musicas (' + self.keys.join(', ') +') VALUES ("'+ mus.audioid +'", "'+ mus.name +'", "'+ mus.artist +'", "'+ mus.band +'", "'+ mus.album +'", "'+ mus.mood_velocity +'", "'+ mus.mood_happy +'", "'+ mus.path +'", "'+ mus.playlist +'", "'+ mus.type +'", "'+ mus.date_start +'", "'+ mus.date_end +'", "'+ mus.hour_start +'", "'+ mus.hour_end +'", "'+ mus.weekdays +'", "'+ mus.min_interval +'")',[],null,self.SQLError);
				mus.file = (mus.path).split('/').pop();
				ret.push(mus);
			}
			tx.executeSql('DROP TABLE playlists;', [], null, self.SQLError);
			tx.executeSql('CREATE TABLE IF NOT EXISTS playlists (playlistid, name, type)',[],null, self.SQLError);
			tx.executeSql('SELECT DISTINCT playlist, type  FROM musicas_temp WHERE playlist <> "chamada"', [], function (tx, results) {
				var ret = [];
				var len = results.rows.length, i;
				self.playlists = [];
				for (i = 0; i < len; i++) {
					var playlist = results.rows.item(i);	    	
					tx.executeSql('INSERT INTO playlists (playlistid, name, type) VALUES ("'+ playlist.playlistid +'", "'+ playlist.name +'", "'+ playlist.type +'")',[],null,self.SQLError);
					self.playlists.push(playlist);
				}
				self.selectedPlaylist = self.playlists[1];
				self.emit('new-playlists', self.playlists);
				self.reorder();
				//START AUTOMATICAMENTE
				//self.emit('ready-to-start');
			}, self.SQLError);
			
		}, self.SQLError);
		
	});
}
//Devolve a próxima faixa
MusicManager.prototype.nextMusic = function(callback){
	var self = this;
	self.pointerMusic = self.pointerMusic || 0;
	this.db.transaction(function (tx) {
		var max;
		tx.executeSql('SELECT * FROM musicas', [], function (tx, results) {
			
			function createWhere (deleteFilters){
				deleteFilters = deleteFilters || 0;
				var wheres = [];
				wheres.push(self.wherePlaylist());
				console.log(self.selectedPlaylist.type+" == normal");
				if(self.selectedPlaylist.type=="normal"){
					wheres.push(self.whereHour());
					wheres.push(self.whereWeekday());
					wheres.push(self.whereMonthday());
					console.log("IF");
				}
				var s_where = "";
				if(wheres!=[]){
					for(i=0;i<deleteFilters;i++){
						wheres.pop();
					}
					var s = wheres.join();
					for(i=0;i<wheres.length;i++){
						s = s.replace(",", " AND ");
					}
					s_where = "WHERE "+s;
				}
				return s_where;
			}
			var mus ;
			var len = results.rows.length, i;

			//PRIMEIRA PASSAGEM 
			var attemps = 0;
			console.log('SELECT * FROM musicas '+createWhere(attemps)+' ORDER BY distance');
			tx.executeSql('SELECT * FROM musicas '+createWhere(attemps)+' ORDER BY distance', [], function (tx, results) {
				var ret = [];
				var len = results.rows.length, i;
				console.log('Atenderam ao select '+len);
				var mus ;
				if(self.pointerMusic==len){
					self.pointerMusic = 0;
				}
				for (i = 0; i < len; i++) {
					mus = results.rows.item(self.pointerMusic);	    
				}
				if(callback && mus){
					mus.file = (mus.path).split('/').pop();
					self.pointerMusic++;
					callback(mus);
				} else {
					//SEGUNDA PASSAGEM
					attemps++;
					tx.executeSql('SELECT * FROM musicas '+createWhere(attemps)+' ORDER BY distance', [], function (tx, results) {
						var ret = [];
						var len = results.rows.length, i;
						console.log('Atenderam ao select '+len);
						var mus ;
						if(self.pointerMusic==len){
							self.pointerMusic = 0;
						}
						for (i = 0; i < len; i++) {
							mus = results.rows.item(self.pointerMusic);	    
						}
						if(callback && mus){
							mus.file = (mus.path).split('/').pop();
							self.pointerMusic++;
							callback(mus);
						} else {
							//TERCEIRA PASSAGEM
							attemps++;
							tx.executeSql('SELECT * FROM musicas '+createWhere(attemps)+' ORDER BY distance', [], function (tx, results) {
								var ret = [];
								var len = results.rows.length, i;
								console.log('Atenderam ao select '+len);
								var mus ;
								if(self.pointerMusic==len){
									self.pointerMusic = 0;
								}
								for (i = 0; i < len; i++) {
									mus = results.rows.item(self.pointerMusic);	    
								}
								if(callback && mus){
									mus.file = (mus.path).split('/').pop();
									self.pointerMusic++;
									callback(mus);
								} else {
									//Bom, se nenhuma musica atendeu à busca sem filtros, talvez realmente tenha algo errado com a entrada de dados.
								}
							}, self.SQLError)
						}
					}, self.SQLError);
				}
			}, self.SQLError);
			
			
		}, self.SQLError);
		
	});
}


MusicManager.prototype.whereHour = function(){// Where para hora do dia
		var date = new Date();
		var now = date.getHours();
		var r = " hour_start<'"+now+"' AND hour_end>'"+now+"' ";
		return r;
}
MusicManager.prototype.whereWeekday = function (){// Where para dia da semana
		var date = new Date();
		var today = date.getDay();
		var arg = "";
		for(var i = 0; i<7; i++){
			arg += (i==today)?"1":"_";
		}
		var r = "weekdays LIKE \'"+arg+"\'";
		return r;
}

MusicManager.prototype.whereMonthday = function(){ // Where para dia do mês
		
		var date = new Date();
		var day = date.getDate();
		day = (day<10)? "0" + day : day;
		var month = date.getMonth()*1+1;
		month = (month<10)? "0" + month : month;
		var year = date.getFullYear();
		var today = year+""+month+""+day;
		var r = "date_start <= '"+today+"' AND date_end >= '"+today+"'";
		return r;
}
MusicManager.prototype.wherePlaylist = function(  ){ // Where para playlist
		var r = "playlist = '"+this.selectedPlaylist.playlist+"'";
		return r;
}
MusicManager.prototype.wherePlaylistType = function(){ // Where para tipo da playlist
		var r = "type = '"+this.selectedPlaylist.type+"'";
		return r;
}

MusicManager.prototype.getLocalList = function(callback){ //Pega a lista atual SEM ATUALIZAR NADA do servidor e põe pra jogo.
	var self = this;
	self.customList = [];
	self.customListIndex = [];
	// Query out the data
	this.db.transaction(function (tx) {
	  tx.executeSql('SELECT * FROM musicas WHERE playlist <> "chamada"', [], function (tx, results) {
	  	var ret = [];
	    var len = results.rows.length, i;
	    for (i = 0; i < len; i++) {
			var mus = results.rows.item(i);	    	
	    	mus.file = (mus.path).split('/').pop();
	      	ret.push(mus);
			self.customList.push(mus);
			self.customListIndex.push(mus.audioid);
	    }
	    if(callback)callback(ret);
	  }, self.SQLError);
	});
}


//Reseta a lista atual ????????????????????????????????????????????????????????????????????
MusicManager.prototype.resetLists = function(){
	var self = this;
	//console.log("resetLists in MusicManager");
	this.db.transaction(function (tx) {
		tx.executeSql('DELETE FROM musicas_temp',function(){
				// complete
			},null, self.SQLError);
		tx.executeSql('DELETE FROM musicas',function(){
				// complete
			},null, self.SQLError);	
	});
	_.each(fs.readdirSync("./data/files/"), function( music ){
		if(fs.existsSync( "./data/files/" + music )){
			fs.unlink( "./data/files/" + music );
		}; 
	});/*//*/
}

MusicManager.prototype.downloadMusics = function( list ){
	var self = this;
	var so = this.server_options;

	var next = list.pop();
	if(next){
		var filename = next.path.split('/').pop();
	} else {
		self.emit('download-completed');
		return;
	}
	
	console.log(filename);
	var so = this.server_options;
	var file_url = so.protocol + "//" + so.hostname + so.path + "/" + next.path;
	var file_uri = this.folder + filename;
	
	if(!fs.existsSync( file_uri )){
		var file = fs.createWriteStream( file_uri );
		var options = {
		    path: file_url
		};
		_.extend( options, this.server_options);
		http.get( file_url , function(res) {
			self.emit('loadmusic-start', next);
			console.log(file_url + ' downloading');
		    res.on('data', function(data) {
		            file.write(data);
		        }).on('end', function() {
		            file.end();
					self.emit('loadmusic-complete', next);
		            self.downloadMusics(list);
		            console.log(file_url + ' downloaded');
		        });
		    });
	}
};
	
//Diminui o volume dos canais 1 e 2 e toca em um terceiro canal uma faixa especial da lista de inserções
MusicManager.prototype.playSpecial = function( data ){
	var self = this;
	//console.log("playSpecial in MusicManager");
	this.db.transaction(function (tx) {
		var keys = _.keys(data);
		var values = _.values(data);
		var query = 'INSERT INTO insercoes_obrigatorias (' + keys.join(', ') +') VALUES ("' + values.join('", "') +'")';
		tx.executeSql(query,[],null,self.SQLError);
		
		//SELECT base para conferencia antes do envio de faixas para as outras classes
		var date = new Date();
		var today = date.getFullYear()+""+("0" + (date.getMonth() + 1)).slice(-2)+""+date.getDate();
		tx.executeSql('SELECT * FROM insercoes_obrigatorias WHERE  date_start < "'+today+'" AND date_end < "'+today+'"', [], function (tx, results) {
			var ret = [];
			var len = results.rows.length, i;
			for (i = 0; i < len; i++) {	    	
				var mus = results.rows.item(i);	    	
				mus.file = (mus.path).split('/').pop();
				ret.push(mus);
			}
		  }, self.SQLError);
	});
};	

MusicManager.prototype.setSelectedPlaylist = function( data ){
	var self = this;
	self.selectedPlaylist = data;
};

MusicManager.prototype.setSelectedPoint = function( data ){
	var self = this;
	self.selectedPoint = data;
	self.reorder();
};
module.exports = new MusicManager();

MusicManager.prototype.reorder = function(){
	var self = this;
	
	this.db.transaction(function (tx) {
		tx.executeSql('SELECT audioid, mood_velocity, mood_happy FROM musicas', [], function (tx, results) {
			var len = results.rows.length, i;
			for (i = 0; i < len; i++) {
				mus = results.rows.item(i);	
				//var distance = Math.sqrt(mus.mood_velocity*mus.mood_velocity + mus.mood_happy*mus.mood_happy);
				var distance = Math.sqrt(Math.abs(Math.pow((self.selectedPoint.x-mus.mood_velocity),2)+Math.pow((self.selectedPoint.y-mus.mood_happy),2)));
				console.log(distance);
				tx.executeSql("UPDATE musicas SET distance = '"+distance+"' WHERE audioid='"+mus.audioid+"'", [], function(){}, self.SQLError);
			}
			console.log('reorder');
		}, self.SQLError);
	});/*//*/
}








//Mostra erros do SQL
MusicManager.prototype.SQLError = function(){
	console.error( arguments );
	//throw new Error(arguments.join(','));
}