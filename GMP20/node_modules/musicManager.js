var fs = require('fs');
var util = require('util');
var EventEmitter = require("events").EventEmitter;
var _ = require('underscore');
var http = require('https');
var qs = require('querystring');


function MusicManager(){
	var self = this;
	var server_options = {};
	var list = {};

	var db;

	this.folder = "./data/files/";

	var status = 'unloaded';
	var downloadBlock = false;
};

util.inherits(MusicManager, EventEmitter);

MusicManager.prototype.init = function(player_opts, server_options, db){
	this.server_options = server_options;
	this.player_opts = player_opts;
	this.loadList();
	
	this.db = db;
	this.db.transaction(function (tx) {
	  tx.executeSql('CREATE TABLE IF NOT EXISTS musicas_temp (audioid, name, artist, band, album, mood_velocity, mood_happy, path, playlist, type, date_start, date_end, hour_start, hour_end, weekdays, min_interval)');
	  tx.executeSql('CREATE TABLE IF NOT EXISTS musicas      (audioid, name, artist, band, album, mood_velocity, mood_happy, path, playlist, type, date_start, date_end, hour_start, hour_end, weekdays, min_interval)');
	  tx.executeSql('TRUNCATE TABLE musicas_temp');
	});
 }

/**
*     List Manager
*
*/

MusicManager.prototype.saveList = function( data ){
	var self = this;

	this.db.transaction(function (tx) {
		_.each( self.list.audios, function( val, i ){
			var mus = val;
			console.log(val);
			var keys = _.keys(val);
			var values = _.values(val);
			tx.executeSql('INSERT INTO musicas_temp (' + keys.join(', ') +') VALUES ("' + keys.join('", "') +'"")');
		});
	});

	var txt = JSON.stringify(this.list);
	this.emit('savelist', txt);
};

MusicManager.prototype.loadList = function( ){
	//( server_options && ( _.extend( this.server_options, server_options )));

	var self = this;
	var res_data = "";
	// LOAD THE DATA

	var options = {headers: {}};
	var data = {psw:"asd"};

	options.headers['Content-Type'] = 'application/x-www-form-urlencoded';
	data = qs.stringify({psw:this.player_opts.password});
	options.headers['Content-Length'] = data.length;

	_.extend( options, this.server_options, {
	  path: this.server_options.path + '/player/' +  this.player_opts.name,
	  method: 'POST'
	});

	//console.log( options );
	
	var req = http.request( options, function(res){
		res.setEncoding('utf8');
		res.on('data', function (chunk) {
			res_data += chunk;
			this.emit('loadlist-data', res_data, chunk);			
		});

		res.on('end', function() {
			console.log(res_data);
			try{				
				self.list = JSON.parse(res_data).data;	
				self.saveList();			
				self.emit('loadlist-complete', JSON.parse(res_data));
			}catch(err) {
			    console.log( "Erro ao importar lista do servidor", err.message );
			}
		});

	});

	req.on('error', function(e) {
		this.emit('loadlist-error', res_data);
		//console.log('problem with request: ' + e.message);
	});

	req.write(data);
	req.end();
}

MusicManager.prototype.verifyList = function( list ){
	var self = this;
	list || (list = self.list.audios);
	
	var ret = {
		founded: [],
		notfounded: []
	};

	_.each(list, function( music ){
		var filename = music.path.split('/').pop();
		if(fs.existsSync( "./data/files/" + filename )){
			ret.founded.push(music);
		}else{
			ret.notfounded.push(music);
		}; 
	});

	return ret;
}

// Busca os arquivos de Ã¡udio local
/* provisoriamente usada como playlist */
MusicManager.prototype.localList = function(callback){
	// Query out the data
	this.db.transaction(function (tx) {
	  tx.executeSql('SELECT * FROM musicas', [], function (tx, results) {
	  	var ret = [];
	    var len = results.rows.length, i;
	    for (i = 0; i < len; i++) {	    	
	    	var mus = results.rows.item(i);	    	
	    	mus.file = (mus.path).split('/').pop();
	      	ret.push(mus);
	      	console.log(mus);
	    }
	    callback(ret);
	  });
	});
}


MusicManager.prototype.updateList = function(callback){
	(callback || (callback = function(){}));
	var self = this;
	self.db.transaction(function (tx) {		
		tx.executeSql('TRUNCATE TABLE musicas');
		tx.executeSql('INSERT INTO musicas SELECT * FROM musicas_temp');
		self.localList( function( ret ){ callback( ret ); } );
	});
}
/**
*     Musics Manager
*
*/

MusicManager.prototype.downloadMusics = function( list ){
	var self = this;
	list || (list = self.verifyList().notfounded);

	if(list.length == 0){ self.emit('loadmusic-allcomplete'); return true; }

	var next = list.pop();
	var filename = next.path.split('/').pop();

	var so = this.server_options;

	var file_url = so.protocol + "//" + so.hostname + so.path + "/" + next.path;
	var file_uri = this.folder + filename;

	if(!fs.existsSync( file_uri )){
		var file = fs.createWriteStream( file_uri );

		var options = {
		    path: file_url
		};
		_.extend( options, this.server_options);

		http.get( file_url , function(res) {
			self.emit('loadmusic-start', next);
			console.log(file_url + ' downling');
		    res.on('data', function(data) {
		            file.write(data);
		        }).on('end', function() {
		            file.end();
					self.emit('loadmusic-complete', next);
		            self.downloadMusics(list);
		            console.log(file_url + ' downloaded');
		        });
		    });
	}else{
		console.log(filename + ' exists ');
		this.downloadMusics(list);
	}
}


module.exports = new MusicManager();

