var fs = require('fs');
var util = require('util');
var EventEmitter = require("events").EventEmitter;
var _ = require('underscore');
var http = require('https');
var qs = require('querystring');


function RemoteControl(){
	var self = this;
	var server_options = {};
	var list = {};
	var request_interval; //call the next server orders request
	this.folder = "./data/files/";

	var status = 'unloaded';
	var downloadBlock = false;
};

util.inherits(RemoteControl, EventEmitter);

RemoteControl.prototype.init = function(player_opts, server_options, request_interval){
	this.server_options = server_options;
	this.player_opts = player_opts;
	this.loadControls();
	this.request_interval = request_interval;
 }

 RemoteControl.prototype.loadControls = function( ){
	var self = this;
	
	
	//simulated JSON
	var stringJson = 	'{"orders":	['+
										/*/'{'+
											'"audioid":0, '+
											'"type":"reset-lists"'+
										'}, '+/*/
										'{'+
											'"audioid":1, '+
											'"type":"play-special", '+
											'"name":"Vinheta de Carnaval", '+
											'"description":"Portela nota 10", '+
											'"path":"path/to/vinheta.ogg", '+
											'"date_start":"20150120", '+       //a data é nesse formato por que o SQLLite não dá suporte a comparação de datas
											'"date_end":"20150228", '+         //a data é nesse formato por que o SQLLite não dá suporte a comparação de datas
											'"hour_start":"19:46:08", '+
											'"repeat":"daily"'+
										'},'+
										'{'+
											'"audioid":2, '+
											'"type":"update-list"'+
										'}, '+
										'{'+
											'"audioid":3, '+
											'"type":"nothing"'+
										'} '+
									']}';
	
	//Handling of response JSON
	//console.log("LoadControls");
	var obj = JSON.parse(stringJson);
	_.each( obj.orders, function( val, i ){
			var event_type = val.type;
			switch (event_type){
				case 'reset-lists':
					//event to musicManager delete musics
					self.emit('reset-lists');
				break;
				case 'update_list':
					//event to musicManager update music list
					self.emit('update-list');
				break;
				case 'play-special':
					//event to musicManager update music list
					self.emit('play-special', val);
				break;
				case 'nothing':
				case '':
				default:
					//no orders
					self.emit('nothing');
				break;
			}
		});

	setTimeout(function(){ 
		self.loadControls();
	}, self.request_interval);
}


module.exports = new RemoteControl();
