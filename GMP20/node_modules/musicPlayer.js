//musicPlayer

var fs = require('fs');
var util = require('util');
var EventEmitter = require("events").EventEmitter;

var _ = require('underscore');
var qs = require('querystring');


function Channel( audio, crossTime ){
	var self = this;
	this.audio = audio;
	this.crossTime = crossTime;

	this.audio.onended 		= function(){ console.log( "musica terminada"); self.emit( 'musicEnded', self ); };
	this.audio.ontimeupdate = function(){ 
		var endTime 	= Math.max( self.audio.duration - ( self.crossTime / 1000 ), ( self.crossTime / 1000 ) );
		var percTime 	= ( self.audio.currentTime / endTime );
		
		self.emit( 
			'musicPlaying',
			percTime,
			self.audio.currentTime,
			endTime
		);
		if( percTime >= 1 ){
			self.emit( 
				'musicEnded',
				percTime,
				self.audio.currentTime,
				endTime 
			);
		}
	};

	this._fading;
}

util.inherits(Channel, EventEmitter);

Channel.prototype.pause = function(){ this.audio.pause(); };
Channel.prototype.play  = function( src ){ 
	this.audio.src = "./data/files/" + src + "?nocache=" + ( new Date() ).getTime();
	this.audio.play();
	this.emit("musicStart", this, src);

	return this;
};
Channel.prototype.stopFade = function( ){ if( this._fading ){ clearInterval(this._fading); }; return this; };
Channel.prototype.fadeDown = function( ){ this._startFade( -0.1 , 0 );  };
Channel.prototype.fadeIn   = function( ){ this._startFade(  0.1 , 1 ); };

Channel.prototype.volume = function( val ){ if(val !== undefined ){ this.audio.volume = Math.round( Math.max( Math.min( val, 1 ), 0 ) * 10 ) / 10 ; return this; }; return this.audio.volume; };
Channel.prototype._startFade = function( step, limit ){
	var self = this;
	this.stopFade();
	this._fading = setInterval( function(){ self._fade(  step , limit ); }, self.crossTime / 10 );
	return this; 
}
Channel.prototype._fade = function( step, limit, callback ){ 
	if( ( Math.round( this.volume() * 1000 ) / 1000 ) == limit ){ this.volume( limit ); this.stopFade(); if(callback){ callback(this); }; return; }
	this.audio.volume += step;
	//console.log( this.audio.volume );	
}


/* */

function MusicPlayer( baseElement ){

	var self = this;
	var base;
	var status = 'init';
	this.channel = 0;
	var base = baseElement;
	this.currentMusic;
	this.currentChannel;
	
	

	this.pos = 0;

	var channel1 = new Channel( base.getElementById("audio1"), 10000 );
	channel1.on( 'musicEnded', function(){ if( self.currentChannel == self.channels[0] ) self.getNextMusic();} );
	channel1.on( 'musicStart', function(){ self.emit("musicStart", self.channel1, self.currentMusic);} );
	channel1.on( 'musicPlaying', function(pos, current, total){ if( self.currentChannel == self.channels[0] ) self.emit("musicPlaying", pos, current, total);} );
	
	var channel2 = new Channel( base.getElementById("audio2"), 10000 );
	channel2.on( 'musicEnded', function(){ if( self.currentChannel == self.channels[1] ) self.getNextMusic();} );
	channel2.on( 'musicStart', function(){ self.emit("musicStart", self.channel2, self.currentMusic);} );
	channel2.on( 'musicPlaying', function(pos, current, total){ if( self.currentChannel == self.channels[1] ) self.emit("musicPlaying", pos, current, total);} );
	
	var channel3 = new Channel( base.getElementById("audio3"), 10000 );
	channel3.on( 'extraEnded', function(){ } );
	channel3.on( 'extraStart', function(){ } );
	channel3.on( 'extraPlaying', function(){ } );

	this.channels = [ channel1, channel2 ];
};

util.inherits(MusicPlayer, EventEmitter);

MusicPlayer.prototype.init = function(){
}
MusicPlayer.prototype.getNextMusic = function(force){
	//if(!force)return;
	this.emit('next-music');
}
MusicPlayer.prototype.nextMusic = function(music){
	//if(!force)return;
	if(!music){
		this.emit('log', "Não há musicas na lista customizada. Por favor atualize sua playlist.");
	} else {
		this.currentMusic = music;
		console.log(music);
		if( this.currentChannel ){ this.currentChannel.fadeDown(); status = "fade"; }
		this.swapChannel().volume(0).play( this.currentMusic.file ).fadeIn();
	}
}

MusicPlayer.prototype.playExtra = function (extra){
	this.currentChannel.volume(0).fadeOut();
}

MusicPlayer.prototype.swapChannel = function(){
	this.currentChannel = ( this.currentChannel !== this.channels[0] )?this.channels[0]:this.channels[1];
	return this.currentChannel;
}

module.exports = MusicPlayer;
